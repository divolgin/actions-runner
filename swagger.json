{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "List, create, update, delete and archive channels.",
    "title": "Vendor API V3",
    "contact": {
      "name": "Replicated, Inc.",
      "url": "http://www.replicated.com/",
      "email": "info@replicated.com"
    },
    "version": "3.0.0"
  },
  "host": "api.replicated.com",
  "basePath": "/vendor/v3",
  "paths": {
    "/app": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Create an app.",
        "operationId": "createApp",
        "parameters": [
          {
            "description": "App create parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Name of the app that is to be created.",
                  "type": "string",
                  "x-go-name": "Name"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/getAppResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/app/{app_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Get an app.",
        "operationId": "getAppProperties",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getAppResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Delete an app.",
        "operationId": "deleteApp",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/responseOk"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/app/{app_id}/channel": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Creates a channel in the KOTS application.",
        "operationId": "createChannel",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "JSON input",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "airgapDiffBundlesEnabled": {
                  "description": "AirgapDiffBundlesEnabled will allow building diff airgap bundles for the channel.",
                  "type": "boolean",
                  "x-go-name": "AirgapDiffBundlesEnabled"
                },
                "airgapDockerRegistryFormatEnabled": {
                  "description": "AirgapDockerRegistryFormatEnabled airgap bundles built after enabling this will use the Docker Registry format.",
                  "type": "boolean",
                  "x-go-name": "AirgapDockerRegistryFormatEnabled"
                },
                "customHostnameOverrides": {
                  "$ref": "#/definitions/CustomHostnameOverrides"
                },
                "description": {
                  "description": "Description of the channel that is to be created.",
                  "type": "string",
                  "x-go-name": "Description"
                },
                "enterprisePartnerChannelID": {
                  "description": "Enterprise Partner Channel Id to be added to channel.",
                  "type": "string",
                  "x-go-name": "EnterprisePartnerChannelID"
                },
                "name": {
                  "type": "string",
                  "x-go-name": "Name"
                },
                "semverRequired": {
                  "description": "SemverRequired when enabled, will cause an error when non semver values are used for new releases",
                  "type": "boolean",
                  "x-go-name": "SemverRequired"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/getChannelResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Get a channel.",
        "operationId": "getChannelProperties",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "ExcludeReleases",
            "description": "Exclude releases",
            "name": "excludeReleases",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getChannelResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Updates an app channel.",
        "operationId": "updateChannel",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Channel update parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "airgapDiffBundlesEnabled": {
                  "description": "AirgapDiffBundlesEnabled will allow building diff airgap bundles for the channel.",
                  "type": "boolean",
                  "x-go-name": "AirgapDiffBundlesEnabled"
                },
                "airgapDockerRegistryFormatEnabled": {
                  "description": "AirgapDockerRegistryFormatEnabled airgap bundles built after enabling this will use the Docker Registry format.",
                  "type": "boolean",
                  "x-go-name": "AirgapDockerRegistryFormatEnabled"
                },
                "autoAirgapBuildsValue": {
                  "description": "AutoAirgapBuildsValue of the channel that is to be updated.",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "AutoAirgapBuildsValue"
                },
                "channelIcon": {
                  "description": "Icon of the channel that is to be updated.",
                  "type": "string",
                  "x-go-name": "ChannelIcon"
                },
                "customHostnameOverrides": {
                  "$ref": "#/definitions/CustomHostnameOverrides"
                },
                "description": {
                  "description": "Description of the channel that is to be updated.",
                  "type": "string",
                  "x-go-name": "Description"
                },
                "isDefault": {
                  "description": "IsDefault indicates if this channel is the default channel for the application.",
                  "type": "boolean",
                  "x-go-name": "IsDefault"
                },
                "name": {
                  "description": "Name of the channel that is to be updated.",
                  "type": "string",
                  "x-go-name": "Name"
                },
                "semverRequired": {
                  "description": "SemverRequired when enabled, will cause an error when non semver values are used for new releases",
                  "type": "boolean",
                  "x-go-name": "SemverRequired"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getChannelResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Archives an app channel.",
        "operationId": "archiveChannel",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/responseOk"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/adoption": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Get adoption rates for an app channel.",
        "operationId": "getChannelAdoptionReport",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "StartDate",
            "description": "Report start date in YYYY-MM-DD format",
            "name": "startDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "EndDate",
            "description": "Report end date in YYYY-MM-DD format",
            "name": "endDate",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "LicenseTypes",
            "description": "License types to include",
            "name": "licenseTypes",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "Interval",
            "description": "Interval to group the report by. Valid values are \"1d\" and \"1w\".  Default is 1d",
            "name": "interval",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getChannelAdoptionReportResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/airgap/download-url": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channelReleases"
        ],
        "summary": "Get airgap bundle download URL the active release on the channel.",
        "operationId": "channelReleaseAirgapBundleURL",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ChannelSequence",
            "description": "If provided, the airgap bundle download URL for the given channel sequence will be returned",
            "name": "channelSequence",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/channelReleaseAirgapBundleURLResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/embeddedcluster/release": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Get an embedded cluster release.",
        "operationId": "getEmbeddedClusterRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ChannelSequence",
            "description": "If provided, downloads the embedded cluster release for the given channel sequence.",
            "name": "channelSequence",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "If provided, includes the customer's license file in the embedded cluster release.",
            "name": "customerId",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "Airgap",
            "description": "If provided, includes the airgap bundle in the embedded cluster release.",
            "name": "airgap",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/release/{sequence}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channelReleases"
        ],
        "summary": "Get install commands for a specific channel release.",
        "operationId": "getChannelReleaseInstallCommands",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getChannelReleaseInstallCommandsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/release/{sequence}/airgap/build": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channelReleases"
        ],
        "summary": "Trigger airgap build for a channel's release.",
        "operationId": "channelReleaseAirgapBuild",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/channelReleaseAirgapBuildResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/release/{sequence}/update-properties": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channelReleases"
        ],
        "summary": "Update properties for a channel release.",
        "operationId": "updateChannelRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          },
          {
            "description": "Update release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isRequired": {
                  "description": "Prevent this release from being skipped during upgrades",
                  "type": "boolean",
                  "x-go-name": "IsRequired"
                },
                "releaseNotes": {
                  "description": "The updated release notes",
                  "type": "string",
                  "x-go-name": "ReleaseNotes"
                },
                "versionLabel": {
                  "description": "The new version label to use",
                  "type": "string",
                  "x-go-name": "VersionLabel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateChannelRelease"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/releases": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channelReleases"
        ],
        "summary": "List releases for an app channel.",
        "operationId": "listChannelReleases",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CurrentPage",
            "description": "Current page",
            "name": "currentPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listChannelReleasesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channel/{channel_id}/trends": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "Get customer instance trends for an app channel.",
        "operationId": "getChannelInstanceTrends",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelID",
            "description": "Channel identifier",
            "name": "channel_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Interval",
            "name": "Interval",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getChannelInstanceTrendsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/channels": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "channels"
        ],
        "summary": "List channels for an app.",
        "operationId": "listChannels",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "ChannelName",
            "description": "filter by channel name",
            "name": "channelName",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "ExcludeDetail",
            "description": "Exclude detail",
            "name": "excludeDetail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listChannelsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/cluster-usage": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "List cluster usage.",
        "operationId": "listClusterUsage",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listClusterUsageResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/custom-hostname": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Create a custom hostname",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customHostnames"
        ],
        "operationId": "createCustomHostname",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "downloadPortal": {
                  "$ref": "#/definitions/CreateCustomHostnameParams"
                },
                "proxy": {
                  "$ref": "#/definitions/CreateCustomHostnameParams"
                },
                "registry": {
                  "$ref": "#/definitions/CreateCustomHostnameParams"
                },
                "replicatedApp": {
                  "$ref": "#/definitions/CreateCustomHostnameParams"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createCustomHostnameResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Delete a custom hostname",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customHostnames"
        ],
        "operationId": "deleteCustomHostname",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "downloadPortal": {
                  "$ref": "#/definitions/DeleteCustomHostnameParams"
                },
                "proxy": {
                  "$ref": "#/definitions/DeleteCustomHostnameParams"
                },
                "registry": {
                  "$ref": "#/definitions/DeleteCustomHostnameParams"
                },
                "replicatedApp": {
                  "$ref": "#/definitions/DeleteCustomHostnameParams"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteCustomHostnameResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/custom-hostname/default/set": {
      "put": {
        "description": "Set the default hostname",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customHostnames"
        ],
        "operationId": "setDefaultHostname",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "downloadPortal": {
                  "$ref": "#/definitions/SetDefaultHostnameParams"
                },
                "proxy": {
                  "$ref": "#/definitions/SetDefaultHostnameParams"
                },
                "registry": {
                  "$ref": "#/definitions/SetDefaultHostnameParams"
                },
                "replicatedApp": {
                  "$ref": "#/definitions/SetDefaultHostnameParams"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/setDefaultHostnameResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/custom-hostname/default/unset": {
      "put": {
        "description": "Unset the default hostname",
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customHostnames"
        ],
        "operationId": "unsetDefaultHostname",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "downloadPortal": {
                  "$ref": "#/definitions/UnsetDefaultHostnameParams"
                },
                "proxy": {
                  "$ref": "#/definitions/UnsetDefaultHostnameParams"
                },
                "registry": {
                  "$ref": "#/definitions/UnsetDefaultHostnameParams"
                },
                "replicatedApp": {
                  "$ref": "#/definitions/UnsetDefaultHostnameParams"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/unsetDefaultHostnameResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/custom-hostnames": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customHostnames"
        ],
        "summary": "List custom hostnames for an app.",
        "operationId": "listCustomHostnames",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCustomHostnamesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customer-entitlements/{customer_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Get customer entitlements.",
        "operationId": "getCustomerEntitlements",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getCustomerResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customer/{customer_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Get a customer.",
        "operationId": "getCustomer",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getCustomerResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customer/{customer_id}/instances": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "instances"
        ],
        "summary": "List customer instances.",
        "operationId": "listCustomerInstances",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCustomerInstancesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customer/{customer_id}/license-download": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "text/yaml",
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Download a customer license file as YAML.",
        "operationId": "downloadLicense",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/downloadLicenseResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customer_instances": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "file"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Get customer instance report in CSV or JSON format.",
        "operationId": "listAppCustomerInstances",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SortColumn",
            "description": "Sort column",
            "name": "sortColumn",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortDesc",
            "description": "Sort descending",
            "name": "sortDesc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "Format",
            "description": "Format to export: csv or json",
            "name": "format",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "CustomerIds",
            "description": "Comma separated array of customer ids",
            "name": "customerIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAppCustomerInstancesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "List customers for an app.",
        "operationId": "listAppCustomers",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CurrentPage",
            "description": "Current page",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortColumn",
            "description": "Sort column",
            "name": "sortColumn",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortDesc",
            "description": "Sort descending",
            "name": "sortDesc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "CustomerName",
            "description": "filter by customer name",
            "name": "customerName",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "IncludeTest",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "ExpiresBefore",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCustomersResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/customers_csv": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "file"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Get customer report in CSV format.",
        "operationId": "listAppCustomersCsv",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "SortColumn",
            "description": "Sort column",
            "name": "sortColumn",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortDesc",
            "description": "Sort descending",
            "name": "sortDesc",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "CustomerName",
            "description": "filter by customer name",
            "name": "customerName",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAppCustomersCsvResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          }
        }
      }
    },
    "/app/{app_id}/events": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Get instance events in JSON format.",
        "operationId": "listAppInstanceEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "CustomerIds",
            "description": "Comma separated array of customer ids",
            "name": "customerIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "InstanceIds",
            "name": "instanceIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "EventTypes",
            "name": "eventTypes",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "Before",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "x-go-name": "After",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "name": "Format",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listAppInstanceEventsResponse"
          },
          "204": {
            "$ref": "#/responses/responseNoContent"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/license-field": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Create a license field for a given app.",
        "operationId": "createLicenseField",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name",
                "type",
                "title",
                "hidden"
              ],
              "properties": {
                "default": {
                  "description": "Default value of the entitlement field that is to be created.",
                  "type": "string",
                  "x-go-name": "Default"
                },
                "hidden": {
                  "description": "Hidden flag of the entitlement field that is to be created.",
                  "type": "boolean",
                  "x-go-name": "Hidden"
                },
                "name": {
                  "description": "Name of the entitlement field that is to be created.",
                  "type": "string",
                  "x-go-name": "Name"
                },
                "required": {
                  "description": "Required flag of the entitlement field that is to be created.",
                  "type": "boolean",
                  "x-go-name": "Required"
                },
                "title": {
                  "description": "Title of the entitlement field that is to be created.",
                  "type": "string",
                  "x-go-name": "Title"
                },
                "type": {
                  "description": "Type of the entitlement field that is to be created.",
                  "type": "string",
                  "x-go-name": "Type"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/createLicenseFieldResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/license-field/{license_field_name}": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Update a license field for a given appId and licenseFieldName.",
        "operationId": "editLicenseField",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "LicenseFieldName",
            "description": "Field name",
            "name": "license_field_name",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "title",
                "default",
                "hidden",
                "required"
              ],
              "properties": {
                "default": {
                  "description": "Optional default value for this licensefield.",
                  "type": "string",
                  "x-go-name": "Default"
                },
                "hidden": {
                  "description": "Indicates if this field will be visible from the on-premise license screen.",
                  "type": "boolean",
                  "x-go-name": "Hidden"
                },
                "required": {
                  "description": "Indicates if this field will be required from the on-premise license screen.",
                  "type": "boolean",
                  "x-go-name": "Required"
                },
                "title": {
                  "description": "Title of custom license field to display.",
                  "type": "string",
                  "x-go-name": "Title"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/editLicenseFieldResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Delete a field for a given app and named field.",
        "operationId": "deleteLicenseField",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "LicenseFieldName",
            "description": "Field name",
            "name": "license_field_name",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "x-go-name": "PreserveFields",
            "description": "Field name",
            "name": "preserve_fields",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteLicenseFieldResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/license-fields": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "List license fields for a given appId.",
        "operationId": "listLicenseFields",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listLicenseFieldsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Create a new release.",
        "operationId": "createRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Create release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "spec": {
                  "description": "The spec to use in the new release",
                  "type": "string",
                  "x-go-name": "Spec"
                },
                "spec_gzip": {
                  "description": "The spec to use in the new release, but gzipped",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  },
                  "x-go-name": "SpecGzip"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createRelease"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release/draft": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Draft a release for an app.",
        "operationId": "draftRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Create draft release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "isBuildersRelease": {
                  "description": "When true, the draft will be a Builders draft. Otherwise it will be a KOTS draft.",
                  "type": "boolean",
                  "x-go-name": "IsBuildersRelease"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/draftReleaseResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release/{sequence}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Get a release by sequence.",
        "operationId": "getRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getRelease"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Update a release.",
        "operationId": "updateRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          },
          {
            "description": "Update release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "spec": {
                  "description": "The spec to use in the release",
                  "type": "string",
                  "x-go-name": "Spec"
                },
                "spec_gzip": {
                  "description": "The spec to use in the release, in gzip format",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  },
                  "x-go-name": "SpecGzip"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateRelease"
          },
          "400": {
            "$ref": "#/responses/updateReleaseError"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release/{sequence}/compatibility": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Report a compatibility result.",
        "operationId": "reportCompatibilityResult",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          },
          {
            "description": "Report Compatibility result parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "distribution": {
                  "type": "string",
                  "x-go-name": "Distribution"
                },
                "failureAt": {
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "FailureAt"
                },
                "failureNotes": {
                  "type": "string",
                  "x-go-name": "FailureNotes"
                },
                "successAt": {
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "SuccessAt"
                },
                "successNotes": {
                  "type": "string",
                  "x-go-name": "SuccessNotes"
                },
                "version": {
                  "type": "string",
                  "x-go-name": "Version"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/compatibilityResponse"
          },
          "400": {
            "$ref": "#/responses/compatibilityErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release/{sequence}/promote": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Promote a release.",
        "operationId": "promoteRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          },
          {
            "description": "Promote release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "channelIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "ChannelIDs"
                },
                "ignoreWarnings": {
                  "type": "boolean",
                  "x-go-name": "IgnoreWarnings"
                },
                "isRequired": {
                  "type": "boolean",
                  "x-go-name": "IsRequired"
                },
                "omitDetailsInResponse": {
                  "description": "Omits channels, charts, and compatibilityResults details in the response body",
                  "type": "boolean",
                  "x-go-name": "OmitDetailsInResponse"
                },
                "releaseNotes": {
                  "type": "string",
                  "x-go-name": "ReleaseNotes"
                },
                "releaseNotesGzip": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "uint8"
                  },
                  "x-go-name": "ReleaseNotesGzip"
                },
                "versionLabel": {
                  "type": "string",
                  "x-go-name": "VersionLabel"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/promoteReleaseResponse"
          },
          "400": {
            "$ref": "#/responses/promoteReleaseErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/release/{sequence}/test": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Test a release.",
        "operationId": "testRelease",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Sequence",
            "description": "Release identifier",
            "name": "sequence",
            "in": "path",
            "required": true
          },
          {
            "description": "Promote release parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/testReleaseResponse"
          },
          "400": {
            "$ref": "#/responses/testReleaseErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/testReleaseErrorResponse"
          },
          "412": {
            "$ref": "#/responses/testReleaseErrorResponse"
          }
        }
      }
    },
    "/app/{app_id}/releases": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "List releases for an app.",
        "operationId": "listReleases",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CurrentPage",
            "description": "Current page",
            "name": "currentPage",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listReleasesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/releases/active": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "List active releases for an app.",
        "operationId": "listActiveReleases",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CurrentPage",
            "description": "Current page",
            "name": "currentPage",
            "in": "query"
          }
        ],
        "responses": {
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/releases/archive": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "releases"
        ],
        "summary": "Archive releases.",
        "operationId": "archiveReleases",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Archive releases parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "sequences": {
                  "description": "The release sequences to archive",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "x-go-name": "Sequences"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/atchiveReleasesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/app/{app_id}/rename": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Rename the app.",
        "operationId": "renameApp",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "description": "App rename parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "New name of the app.",
                  "type": "string",
                  "x-go-name": "Name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/responseOk"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "429": {
            "$ref": "#/responses/responseErrTooManyRequests"
          }
        }
      }
    },
    "/apps": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "List apps for a team.",
        "operationId": "apps",
        "responses": {
          "200": {
            "$ref": "#/responses/listAppsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/apps/{app_id}/customers/{customer_id}/instances/{instance_id}/tags": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "summary": "Create or update the tags for an instance.",
        "operationId": "updateCustomerInstanceTags",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "AppID",
            "description": "App identifier",
            "name": "app_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "InstanceID",
            "description": "Instance identifier",
            "name": "instance_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Requried: true",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "description": "Upsert (create or update) instance tags. A key with an empty value will result in a delete operation for the key=value pair.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/InstanceTag"
                  },
                  "x-go-name": "Tags"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/updateCustomerInstanceTagsResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Create a test cluster.",
        "operationId": "createCluster",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreateClusterParametersBody"
            }
          },
          {
            "type": "boolean",
            "name": "DryRun",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createClusterResponse"
          },
          "400": {
            "$ref": "#/responses/createClusterErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/filters": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Get clusters filters.",
        "operationId": "getClusterFilters",
        "responses": {
          "200": {
            "$ref": "#/responses/getClusterFiltersResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/quotas": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "List cluster quotas.",
        "operationId": "listClusterQuotas",
        "responses": {
          "200": {
            "$ref": "#/responses/listClusterQuotasResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/stats": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Get clusters stats.",
        "operationId": "getClusterStats",
        "responses": {
          "200": {
            "$ref": "#/responses/getClusterStatsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/versions": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "List cluster versions.",
        "operationId": "listClusterVersions",
        "responses": {
          "200": {
            "$ref": "#/responses/listClusterVersionsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Get the details for a test cluster.",
        "operationId": "getCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getClusterResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      },
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Delete a test cluster.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteClusterResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/addons": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterAddons"
        ],
        "summary": "Lists addons for all clusters.",
        "operationId": "listClusterAddons",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listClusterAddonsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/addons/objectstore": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterAddons"
        ],
        "summary": "Adds an object store addon to a cluster.",
        "operationId": "createClusterAddonObjectStore",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "bucket": {
                  "type": "string",
                  "x-go-name": "BucketDeprecated"
                },
                "bucket_prefix": {
                  "type": "string",
                  "x-go-name": "BucketPrefix"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createClusterAddonObjectStoreResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/addons/postgres": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterAddons"
        ],
        "summary": "Adds a Postgres addon to a cluster.",
        "operationId": "createClusterAddonPostgres",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "disk_gib": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "DiskGiB"
                },
                "instance_type": {
                  "type": "string",
                  "x-go-name": "InstanceType"
                },
                "version": {
                  "type": "string",
                  "x-go-name": "Version"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createClusterAddonPostgresResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/addons/{addon_id}": {
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusterAddons"
        ],
        "summary": "Deletes an addon from a cluster.",
        "operationId": "deleteClusterAddon",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "x-go-name": "AddonID",
            "description": "Cluster addon identifier",
            "name": "addon_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/responseNoContent"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/kubeconfig": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Get the kubeconfig for a test cluster.",
        "operationId": "getClusterKubeconfig",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getClusterKubeconfigResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/port": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Exposes a port on a cluster.",
        "operationId": "createClusterPort",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "port",
                "protocols"
              ],
              "properties": {
                "is_wildcard": {
                  "description": "IsWildcard",
                  "type": "boolean",
                  "x-go-name": "IsWildcard"
                },
                "port": {
                  "description": "Port Number",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Port"
                },
                "protocols": {
                  "description": "Protocols",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PortProtocol"
                  },
                  "x-go-name": "Protocols"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createClusterPortResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/port/{port_number}": {
      "delete": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Deletes a port from a cluster.",
        "operationId": "deleteClusterPort",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PortNumber",
            "description": "Port Number",
            "name": "port_number",
            "in": "path",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Protocols",
            "description": "Protocols",
            "name": "protocols",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/deleteClusterPortResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/ports": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Lists ports for a cluster.",
        "operationId": "listClusterPorts",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listClusterPortsResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/tags": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Update the tags for a cluster.",
        "operationId": "updateClusterTags",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ClusterTag"
                  },
                  "x-go-name": "Tags"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/updateClusterTagsResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/ttl": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Update ttl for a cluster.",
        "operationId": "updateClusterTTL",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "ttl": {
                  "type": "string",
                  "x-go-name": "TTL"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/updateClusterTTLResponse"
          },
          "400": {
            "$ref": "#/responses/updateClusterTTLErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cluster/{cluster_id}/upgrade": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Upgrade a test cluster.",
        "operationId": "upgradeCluster",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "ClusterID",
            "description": "Cluster identifier",
            "name": "cluster_id",
            "in": "path",
            "required": true
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "kubernetes_version": {
                  "type": "string",
                  "x-go-name": "KubernetesVersion"
                }
              }
            }
          },
          {
            "type": "boolean",
            "name": "DryRun",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/upgradeClusterValidationErrorResponse"
          },
          "400": {
            "$ref": "#/responses/upgradeClusterValidationErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/clusters": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "List test clusters.",
        "operationId": "listClusters",
        "responses": {
          "200": {
            "$ref": "#/responses/listClustersResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/cmx/credits/buy": {
      "post": {
        "description": "Start the process of adding credits to a team. This generally\ncredits a stripe checkout session",
        "tags": [
          "clusters"
        ],
        "summary": "Add credits to a team.",
        "operationId": "addClusterCredits",
        "responses": {
          "200": {
            "$ref": "#/responses/increaseClusterCreditsResponse"
          },
          "400": {
            "$ref": "#/responses/increaseClusterCreditsErrorResponse"
          },
          "500": {
            "$ref": "#/responses/increaseClusterCreditsErrorResponse"
          }
        }
      }
    },
    "/cmx/quotas/increase": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "clusters"
        ],
        "summary": "Send a request to increase cluster quota.",
        "operationId": "increaseClusterQuota",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "requests": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/IncreaseQuotaRequest"
                  },
                  "x-go-name": "Requests"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/increaseClusterQuotaResponse"
          },
          "400": {
            "$ref": "#/responses/increaseClusterQuotaErrorResponse"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customer": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Create a KOTS customer.",
        "operationId": "createCustomer",
        "parameters": [
          {
            "description": "Customer create parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "app_id"
              ],
              "properties": {
                "app_id": {
                  "description": "App to which the customer is associated.",
                  "type": "string",
                  "x-go-name": "AppID"
                },
                "channel_id": {
                  "description": "Channel to which the customer license is associated.",
                  "type": "string",
                  "x-go-name": "ChannelID"
                },
                "custom_id": {
                  "description": "Custom ID that can be used in external systems.",
                  "type": "string",
                  "x-go-name": "CustomID"
                },
                "email": {
                  "description": "Email address of the customer that is to be created",
                  "type": "string",
                  "x-go-name": "Email"
                },
                "entitlementValues": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntitlementValue"
                  },
                  "x-go-name": "EntitlementValues"
                },
                "expires_at": {
                  "type": "string",
                  "x-go-name": "ExpiresAtStr"
                },
                "is_airgap_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsAirgapEnabled"
                },
                "is_disaster_recovery_supported": {
                  "type": "boolean",
                  "x-go-name": "IsDisasterRecoverySupported"
                },
                "is_embedded_cluster_download_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsEmbeddedClusterDownloadEnabled"
                },
                "is_geoaxis_supported": {
                  "type": "boolean",
                  "x-go-name": "IsGeoaxisSupported"
                },
                "is_gitops_supported": {
                  "type": "boolean",
                  "x-go-name": "IsGitopsSupported"
                },
                "is_helmvm_download_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsHelmVMDownloadEnabled"
                },
                "is_identity_service_supported": {
                  "type": "boolean",
                  "x-go-name": "IsIdentityServiceSupported"
                },
                "is_installer_support_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsInstallerSupportEnabled"
                },
                "is_kots_install_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsKotsInstallEnabled"
                },
                "is_snapshot_supported": {
                  "type": "boolean",
                  "x-go-name": "IsSnapshotSupported"
                },
                "is_support_bundle_upload_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsSupportBundleUploadEnabled"
                },
                "name": {
                  "description": "Name of the customer that is to be created.",
                  "type": "string",
                  "x-go-name": "Name"
                },
                "type": {
                  "$ref": "#/definitions/LicenseType"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/getCustomerResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/customer/{customer_id}": {
      "put": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Update a customer.",
        "operationId": "updateCustomer",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Update customer parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "name",
                "app_id"
              ],
              "properties": {
                "app_id": {
                  "description": "App to which the channel is associated.",
                  "type": "string",
                  "x-go-name": "AppID"
                },
                "channel_id": {
                  "description": "The channel id to which the customer is associated.",
                  "type": "string",
                  "x-go-name": "ChannelID"
                },
                "custom_id": {
                  "description": "Custom ID that can be used in external systems.",
                  "type": "string",
                  "x-go-name": "CustomID"
                },
                "email": {
                  "description": "Email of the customer that is to be updated",
                  "type": "string",
                  "x-go-name": "Email"
                },
                "entitlementValues": {
                  "description": "Applies only to the currently selected app",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EntitlementValue"
                  },
                  "x-go-name": "EntitlementValues"
                },
                "expires_at": {
                  "description": "Format is YYYY-MM-DD, e.g. 2021-02-24",
                  "type": "string",
                  "x-go-name": "ExpiresAtStr"
                },
                "is_airgap_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsAirgapEnabled"
                },
                "is_disaster_recovery_supported": {
                  "type": "boolean",
                  "x-go-name": "IsDisasterRecoverySupported"
                },
                "is_embedded_cluster_download_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsEmbeddedClusterDownloadEnabled"
                },
                "is_geoaxis_supported": {
                  "type": "boolean",
                  "x-go-name": "IsGeoaxisSupported"
                },
                "is_gitops_supported": {
                  "type": "boolean",
                  "x-go-name": "IsGitopsSupported"
                },
                "is_helmvm_download_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsHelmVMDownloadEnabled"
                },
                "is_identity_service_supported": {
                  "type": "boolean",
                  "x-go-name": "IsIdentityServiceSupported"
                },
                "is_kots_install_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsKotsInstallEnabled"
                },
                "is_snapshot_supported": {
                  "type": "boolean",
                  "x-go-name": "IsSnapshotSupported"
                },
                "is_support_bundle_upload_enabled": {
                  "type": "boolean",
                  "x-go-name": "IsSupportBundleUploadEnabled"
                },
                "name": {
                  "description": "Name of the customer that is to be updated.",
                  "type": "string",
                  "x-go-name": "Name"
                },
                "type": {
                  "$ref": "#/definitions/LicenseType"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/getCustomerResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customer/{customer_id}/airgap/password": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Regenerate the airgap password used to access the customer's download portal.",
        "operationId": "postAirgapPassword",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/postAirgapPasswordResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customer/{customer_id}/archive": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Archive a customer.",
        "operationId": "archiveCustomer",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/responseNoContent"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customer/{customer_id}/unarchive": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Unarchive a customer.",
        "operationId": "unarchiveCustomer",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "CustomerID",
            "description": "Customer identifier",
            "name": "customer_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/responseNoContent"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "List all customers.",
        "operationId": "listCustomers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "PageSize",
            "description": "Page size",
            "name": "pageSize",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "CurrentPage",
            "description": "Current page",
            "name": "currentPage",
            "in": "query"
          },
          {
            "type": "string",
            "x-go-name": "SortColumn",
            "description": "Sort column",
            "name": "sortColumn",
            "in": "query"
          },
          {
            "type": "boolean",
            "x-go-name": "SortDesc",
            "description": "Sort descending",
            "name": "sortDesc",
            "in": "query"
          },
          {
            "type": "boolean",
            "name": "IncludeTest",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "name": "ExpiresBefore",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/listCustomersResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/customers/search": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "customers"
        ],
        "summary": "Search all customers for a given team context.",
        "operationId": "searchTeamCustomers",
        "parameters": [
          {
            "description": "Search customers parameters.\nAt least one of the following flags are **required** `include_inactive`, `include_active`.\nAt least one of the following flags are **required** `include_dev`, `include_trial`, `include_paid`, `include_community`, `include_test`.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "adoption_rate_filter": {
                  "type": "string",
                  "x-go-name": "AdoptionRateFilter"
                },
                "app_id": {
                  "description": "The app id to limit search. If not provided, customers for all apps will be searched.",
                  "type": "string",
                  "x-go-name": "AppID"
                },
                "channel_names": {
                  "description": "Restrict search to customers in the specified channels.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "ChannelNames"
                },
                "expires_before": {
                  "type": "string",
                  "format": "date-time",
                  "x-go-name": "ExpiresBefore"
                },
                "include_active": {
                  "description": "When set to true, active customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeActive"
                },
                "include_archived": {
                  "description": "When set to true, archived customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeArchived"
                },
                "include_community": {
                  "description": "When set to true, community customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeCommunity"
                },
                "include_dev": {
                  "description": "When set to true, dev customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeDev"
                },
                "include_inactive": {
                  "description": "When set to true, inactive customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeInactive"
                },
                "include_paid": {
                  "description": "When set to true, paid customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludePaid"
                },
                "include_test": {
                  "description": "When set to true, test customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeTest"
                },
                "include_trial": {
                  "description": "When set to true, trial customers will be included in the search results. Default is false.",
                  "type": "boolean",
                  "x-go-name": "IncludeTrial"
                },
                "instance_preview": {
                  "type": "boolean",
                  "x-go-name": "InstancePreview"
                },
                "max_instances": {
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "MaxInstances"
                },
                "offset": {
                  "description": "The number of pages to skip.",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "Offset"
                },
                "page_size": {
                  "description": "The number of customers to return per page.",
                  "type": "integer",
                  "format": "int64",
                  "x-go-name": "PageSize"
                },
                "query": {
                  "description": "The search query.\nBy default this value will be used to search customers by name.\nWhen value is in the key:value format, it can be used to search specific fields.\nThe following fields are supported.\n`name`: search by customer name. For example name:acme. This search is fuzzy and case insensitive.\n`type`: search by customer type. Possible values are prod, trial, dev, and community. For example type:trial.\n`airgap`: search by airgap status. Possible values are true and false. For example airgap:true.\n`channels`.name: search by channel name. For example channels.name:stable. This search is fuzzy and case insensitive.\n`customId`: search by custom id. For example customId:123. This is an exact match search.\n`email`: search by customer email. For example email:bob@replicated.com. This is an exact match search.",
                  "type": "string",
                  "x-go-name": "Query"
                },
                "sort_direction": {
                  "description": "The sort direction. Possible values are asc and desc. Default is desc if `sort_field` is specified.",
                  "type": "string",
                  "x-go-name": "SortDirection"
                },
                "sort_field": {
                  "description": "The field to sort by. Possible values are `expiresAt`, `createdAt`, `name`, `type`. Default is none",
                  "type": "string",
                  "x-go-name": "SortField"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/searchTeamCustomersResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          }
        }
      }
    },
    "/external_registries": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "externalRegistries"
        ],
        "summary": "Test external registry for a team.",
        "operationId": "testExternalRegistry",
        "parameters": [
          {
            "description": "ExternalRegistry create parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "endpoint",
                "image"
              ],
              "properties": {
                "endpoint": {
                  "description": "Endpoint of the external registry.",
                  "type": "string",
                  "x-go-name": "Endpoint"
                },
                "image": {
                  "description": "Image to test pulling.",
                  "type": "string",
                  "x-go-name": "Image"
                },
                "password": {
                  "description": "Password to use, provide only when testing before saving",
                  "type": "string",
                  "x-go-name": "Password"
                },
                "username": {
                  "description": "Username to use, provide only when testing before saving",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/testExternalRegistryResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/external_registry": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "teams"
        ],
        "summary": "Creates an external registry with the specified parameters.",
        "operationId": "createExternalRegistry",
        "parameters": [
          {
            "description": "ExternalRegistry create parameters.",
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "endpoint",
                "username",
                "password"
              ],
              "properties": {
                "authType": {
                  "description": "Auth type for the upstream registry (optional)",
                  "type": "string",
                  "x-go-name": "AuthType"
                },
                "endpoint": {
                  "description": "Endpoint of the upstream registry.",
                  "type": "string",
                  "x-go-name": "Endpoint"
                },
                "password": {
                  "description": "Password for authentication with the upstream registry.",
                  "type": "string",
                  "x-go-name": "Password"
                },
                "provider": {
                  "description": "Provider of the upstream registry. (optional)",
                  "type": "string",
                  "x-go-name": "Provider"
                },
                "skipValidation": {
                  "description": "SkipValidation just saves the values without checking if the registry is valid.",
                  "type": "boolean",
                  "x-go-name": "SkipValidation"
                },
                "username": {
                  "description": "Username for authentication with the upstream registry.",
                  "type": "string",
                  "x-go-name": "Username"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/createExternalRegistryResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/external_registry/logs": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "externalRegistries"
        ],
        "summary": "Get the logs for a specific external registry.",
        "operationId": "externalRegistryLogs",
        "responses": {
          "200": {
            "$ref": "#/responses/listExternalRegistriesResponse"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/external_registry/{endpoint}": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "teams"
        ],
        "summary": "Deletes an external registry by endpoint.",
        "operationId": "deleteExternalRegistry",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "Endpoint",
            "description": "Endpoint identifier",
            "name": "endpoint",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/responseNoContent"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/instance/{instance_id}/subscribe": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Subscribe to instance events.",
        "operationId": "subscribeInstanceEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "InstanceID",
            "description": "Instance identifier",
            "name": "instance_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Subscribe to instance events parameters.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventName": {
                  "description": "Instance event name",
                  "type": "string",
                  "x-go-name": "EventName"
                },
                "eventNames": {
                  "description": "Instance event names",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "EventNames"
                },
                "teamSlack": {
                  "description": "Subscribe to team slack notifications",
                  "type": "boolean",
                  "x-go-name": "TeamSlack"
                },
                "userEmail": {
                  "description": "Subscribe to user email notifications",
                  "type": "boolean",
                  "x-go-name": "UserEmail"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/subscribeInstanceEvents"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/instance/{instance_id}/unsubscribe": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Unsubscribe from instance events.",
        "operationId": "unsubscribeInstanceEvents",
        "parameters": [
          {
            "type": "string",
            "x-go-name": "InstanceID",
            "description": "Instance identifier",
            "name": "instance_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Unsubscribe from instance events parameters.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "eventName": {
                  "description": "Instance event name",
                  "type": "string",
                  "x-go-name": "EventName"
                },
                "eventNames": {
                  "description": "Instance event names",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "x-go-name": "EventNames"
                },
                "teamSlack": {
                  "description": "Unsubscribe from team slack notifications",
                  "type": "boolean",
                  "x-go-name": "TeamSlack"
                },
                "userEmail": {
                  "description": "Unsubscribe from user email notifications",
                  "type": "boolean",
                  "x-go-name": "UserEmail"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/unsubscribeInstanceEvents"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/team/instance-subscriptions": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Get team instance subscriptions.",
        "operationId": "getTeamSubscriptions",
        "responses": {
          "200": {
            "$ref": "#/responses/getSubscriptions"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    },
    "/team/slack-config": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Get Slack webhook URL for team.",
        "operationId": "getSlackWebhookURL",
        "responses": {
          "200": {
            "$ref": "#/responses/getSlackWebhookURL"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      },
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Set Slack webhook URL for team.",
        "operationId": "setSlackWebhookURL",
        "parameters": [
          {
            "description": "Update Slack webhook parameters.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "webhookUrl": {
                  "description": "Slack webhook URL",
                  "type": "string",
                  "x-go-name": "WebhookURL"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/setSlackWebhookURL"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/team/slack-config/test": {
      "post": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Test Slack webhook URL for team.",
        "operationId": "testSlackWebhookURL",
        "parameters": [
          {
            "description": "Test Slack webhook parameters.",
            "name": "Body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "webhookUrl": {
                  "type": "string",
                  "x-go-name": "WebhookURL"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/testSlackWebhookURL"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          }
        }
      }
    },
    "/user/instance-subscriptions": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "notifications"
        ],
        "summary": "Get user instance subscriptions.",
        "operationId": "getUserSubscriptions",
        "responses": {
          "200": {
            "$ref": "#/responses/getSubscriptions"
          },
          "400": {
            "$ref": "#/responses/responseErrBadRequest"
          },
          "401": {
            "$ref": "#/responses/responseErrUnauthorized"
          },
          "403": {
            "$ref": "#/responses/responseErrForbidden"
          },
          "404": {
            "$ref": "#/responses/responseErrNotFound"
          }
        }
      }
    }
  },
  "definitions": {
    "Actor": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "link": {
          "type": "string",
          "x-go-name": "Link"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Timestamp"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/models/types"
    },
    "AppRelease": {
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "x-go-name": "Channels"
        },
        "charts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Chart"
          },
          "x-go-name": "Charts"
        },
        "compatibilityResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompatibilityResult"
          },
          "x-go-name": "CompatibilityResults"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "hasKurlInstaller": {
          "type": "boolean",
          "x-go-name": "HasKurlInstaller"
        },
        "isArchived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "isHelmOnly": {
          "type": "boolean",
          "x-go-name": "IsHelmOnly"
        },
        "isReleaseNotEditable": {
          "type": "boolean",
          "x-go-name": "IsReleaseNotEditable"
        },
        "lintResult": {
          "$ref": "#/definitions/LintResult"
        },
        "rawSpec": {
          "type": "string",
          "x-go-name": "RawSpec"
        },
        "releaseNotes": {
          "type": "string",
          "x-go-name": "ReleaseNotes"
        },
        "sequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sequence"
        },
        "spec": {
          "type": "string",
          "x-go-name": "Spec"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        },
        "userAgent": {
          "type": "string",
          "x-go-name": "UserAgent"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "AppReleaseDraft": {
      "description": "AppReleaseDraft is a draft of a release before it is created",
      "type": "object",
      "properties": {
        "appId": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "rawSpec": {
          "type": "string",
          "x-go-name": "RawSpec"
        },
        "spec": {
          "type": "string",
          "x-go-name": "Spec"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "AppWithChannels": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "x-go-name": "Channels"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isArchived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "isKotsApp": {
          "type": "boolean",
          "x-go-name": "IsKotsApp"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "publicKeyPem": {
          "type": "string",
          "x-go-name": "PublicKeyPEM"
        },
        "renamedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "RenamedAt"
        },
        "slug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "teamId": {
          "type": "string",
          "x-go-name": "TeamID"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/apps"
    },
    "Channel": {
      "type": "object",
      "properties": {
        "adoptionRate": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerAdoption"
          },
          "x-go-name": "AdoptionRate"
        },
        "airgapDiffBundlesEnabled": {
          "type": "boolean",
          "x-go-name": "AirgapDiffBundlesEnabled"
        },
        "airgapDockerRegistryFormatEnabled": {
          "type": "boolean",
          "x-go-name": "AirgapDockerRegistryFormatEnabled"
        },
        "appId": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "appName": {
          "type": "string",
          "x-go-name": "AppName"
        },
        "appSlug": {
          "type": "string",
          "x-go-name": "AppSlug"
        },
        "buildAirgapAutomatically": {
          "type": "boolean",
          "x-go-name": "BuildAirgapAutomatically"
        },
        "channelIcon": {
          "type": "string",
          "x-go-name": "ChannelIcon"
        },
        "channelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChannelSequence"
        },
        "channelSlug": {
          "type": "string",
          "x-go-name": "Slug"
        },
        "chartReleases": {
          "description": "ChartReleases is a map of chart name -\u003e []string of version labels",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HelmChart"
          },
          "x-go-name": "ChartReleases"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "currentVersion": {
          "type": "string",
          "x-go-name": "CurrentVersion"
        },
        "customHostnameOverrides": {
          "$ref": "#/definitions/CustomHostnameOverrides"
        },
        "customers": {
          "$ref": "#/definitions/TotalActiveInactiveCustomers"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "embeddedClusterInstallCommand": {
          "type": "string",
          "x-go-name": "EmbeddedClusterInstallCommand"
        },
        "enterprisePartnerChannelID": {
          "type": "string",
          "x-go-name": "EnterprisePartnerChannelID"
        },
        "existingClusterInstallCommand": {
          "type": "string",
          "x-go-name": "ExistingClusterInstallCommand"
        },
        "extraLintRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExtraLintRules"
          },
          "x-go-name": "ExtraLintRules"
        },
        "gitHubRef": {
          "$ref": "#/definitions/GitHubRef"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "isArchived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "isHelmOnly": {
          "type": "boolean",
          "x-go-name": "IsHelmOnly"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "numActiveInstances": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumActiveInstances"
        },
        "numReleases": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NumReleases"
        },
        "releaseNotes": {
          "type": "string",
          "x-go-name": "ReleaseNotes"
        },
        "releaseSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReleaseSequence"
        },
        "releases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/KotsChannelRelease"
          },
          "x-go-name": "Releases"
        },
        "replicatedRegistryDomain": {
          "type": "string",
          "x-go-name": "ReplicatedRegistryDomain"
        },
        "semverRequired": {
          "type": "boolean",
          "x-go-name": "SemverRequired"
        },
        "semverWarning": {
          "type": "string",
          "x-go-name": "SemverWarning"
        },
        "targetKotsVersion": {
          "type": "string",
          "x-go-name": "TargetKotsVersion"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "ChannelReleaseInstallCommands": {
      "type": "object",
      "properties": {
        "embeddedClusterInstallCommand": {
          "type": "string",
          "x-go-name": "EmbeddedClusterInstallCommand"
        },
        "existingClusterInstallCommand": {
          "type": "string",
          "x-go-name": "ExistingClusterInstallCommand"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/releases"
    },
    "Chart": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "status": {
          "$ref": "#/definitions/ChartStatus"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "ChartStatus": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "Cluster": {
      "type": "object",
      "properties": {
        "actor": {
          "$ref": "#/definitions/Actor"
        },
        "addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterAddon"
          },
          "x-go-name": "Addons"
        },
        "assigned_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "AssignedAt"
        },
        "cluster_node": {
          "$ref": "#/definitions/ClusterNode"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "credits_per_hour_per_cluster": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreditsPerHourPerCluster"
        },
        "expires_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "flat_fee": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FlatFee"
        },
        "guid": {
          "type": "string",
          "x-go-name": "GUID"
        },
        "id": {
          "type": "string",
          "x-go-name": "ShortID"
        },
        "installer_url": {
          "type": "string",
          "x-go-name": "InstallerURL"
        },
        "ip_family": {
          "type": "string",
          "x-go-name": "IPFamily"
        },
        "kubernetes_distribution": {
          "type": "string",
          "x-go-name": "KubernetesDistribution"
        },
        "kubernetes_version": {
          "type": "string",
          "x-go-name": "KubernetesVersion"
        },
        "last_scheduling_status": {
          "type": "string",
          "x-go-name": "LastSchedulingStatus"
        },
        "license_id": {
          "type": "string",
          "x-go-name": "LicenseID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "node_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NodeGroup"
          },
          "x-go-name": "NodeGroups"
        },
        "running_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "RunningAt"
        },
        "status": {
          "$ref": "#/definitions/ClusterStatus"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterTag"
          },
          "x-go-name": "Tags"
        },
        "team_id": {
          "type": "string",
          "x-go-name": "TeamID"
        },
        "total_credits": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCredits"
        },
        "ttl": {
          "type": "string",
          "x-go-name": "TTL"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterAddon": {
      "type": "object",
      "properties": {
        "cluster_guid": {
          "type": "string",
          "x-go-name": "ClusterGUID"
        },
        "cluster_id": {
          "type": "string",
          "x-go-name": "ClusterShortID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "guid": {
          "type": "string",
          "x-go-name": "GUID"
        },
        "id": {
          "type": "string",
          "x-go-name": "ShortID"
        },
        "object_store": {
          "$ref": "#/definitions/ClusterAddonObjectStore"
        },
        "port": {
          "$ref": "#/definitions/ClusterAddonPort"
        },
        "postgres": {
          "$ref": "#/definitions/ClusterAddonPostgres"
        },
        "ready_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ReadyAt"
        },
        "status": {
          "$ref": "#/definitions/ClusterAddonStatus"
        },
        "terminated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "TerminatedAt"
        },
        "total_credits": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCredits"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterAddonObjectStore": {
      "type": "object",
      "properties": {
        "bucket_name": {
          "type": "string",
          "x-go-name": "BucketName"
        },
        "bucket_prefix": {
          "type": "string",
          "x-go-name": "BucketPrefix"
        },
        "service_account_name": {
          "type": "string",
          "x-go-name": "ServiceAccountName"
        },
        "service_account_name_read_only": {
          "type": "string",
          "x-go-name": "ServiceAccountNameReadOnly"
        },
        "service_account_namespace": {
          "type": "string",
          "x-go-name": "ServiceAccountNamespace"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterAddonPort": {
      "type": "object",
      "properties": {
        "is_wildcard": {
          "type": "boolean",
          "x-go-name": "IsWildcard"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "protocol_http": {
          "type": "boolean",
          "x-go-name": "ProtocolHTTP"
        },
        "protocol_https": {
          "type": "boolean",
          "x-go-name": "ProtocolHTTPS"
        },
        "upstream_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpstreamPort"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterAddonPostgres": {
      "type": "object",
      "properties": {
        "disk_gib": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskGiB"
        },
        "instance_type": {
          "type": "string",
          "x-go-name": "InstanceType"
        },
        "uri": {
          "type": "string",
          "x-go-name": "URI"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterAddonStatus": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterDetail": {
      "type": "object",
      "properties": {
        "cloud_provider": {
          "type": "string",
          "x-go-name": "CloudProvider"
        },
        "is_airgap": {
          "type": "boolean",
          "x-go-name": "IsAirgap"
        },
        "is_kurl": {
          "type": "boolean",
          "x-go-name": "IsKurl"
        },
        "kots_version": {
          "type": "string",
          "x-go-name": "KotsVersion"
        },
        "kubernetes_distribution": {
          "type": "string",
          "x-go-name": "KubernetesDistribution"
        },
        "kubernetes_version": {
          "type": "string",
          "x-go-name": "KubernetesVersion"
        },
        "number_of_instances": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NumberOfInstances"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/c11y"
    },
    "ClusterDistributionStatus": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean",
          "x-go-name": "Enabled"
        },
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "status_message": {
          "type": "string",
          "x-go-name": "StatusMessage"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterExposedPort": {
      "type": "object",
      "properties": {
        "exposed_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExposedPort"
        },
        "protocol": {
          "$ref": "#/definitions/PortProtocol"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterNode": {
      "type": "object",
      "properties": {
        "internal_overlay_endpoint": {
          "type": "string",
          "x-go-name": "InternalOverlayEndpoint"
        },
        "join_command": {
          "type": "string",
          "x-go-name": "JoinCommand"
        },
        "node_group_id": {
          "type": "string",
          "x-go-name": "NodeGroupID"
        },
        "node_index": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Index"
        },
        "node_type": {
          "$ref": "#/definitions/NodeType"
        },
        "overlay_endpoint": {
          "type": "string",
          "x-go-name": "OverlayEndpoint"
        },
        "overlay_token": {
          "type": "string",
          "x-go-name": "OverlayToken"
        },
        "ssh_key": {
          "type": "string",
          "x-go-name": "SSHKey"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterPort": {
      "type": "object",
      "properties": {
        "addon_guid": {
          "type": "string",
          "x-go-name": "AddonGUID"
        },
        "addon_id": {
          "type": "string",
          "x-go-name": "AddonShortID"
        },
        "cluster_guid": {
          "type": "string",
          "x-go-name": "ClusterGUID"
        },
        "cluster_id": {
          "type": "string",
          "x-go-name": "ClusterShortID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "exposed_ports": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterExposedPort"
          },
          "x-go-name": "ExposedPorts"
        },
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "is_wildcard": {
          "type": "boolean",
          "x-go-name": "IsWildcard"
        },
        "port_name": {
          "type": "string",
          "x-go-name": "PortName"
        },
        "state": {
          "$ref": "#/definitions/ClusterAddonStatus"
        },
        "upstream_port": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UpstreamPort"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterQuota": {
      "type": "object",
      "properties": {
        "current_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CurrentValue"
        },
        "default_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DefaultValue"
        },
        "in_use": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InUse"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "queued": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Queued"
        },
        "unit": {
          "type": "string",
          "x-go-name": "Unit"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/cluster"
    },
    "ClusterStatus": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "ClusterTag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "CompatibilityResult": {
      "type": "object",
      "properties": {
        "distribution": {
          "type": "string",
          "x-go-name": "Distribution"
        },
        "failureAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "FailureAt"
        },
        "failureNotes": {
          "type": "string",
          "x-go-name": "FailureNotes"
        },
        "successAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "SuccessAt"
        },
        "successNotes": {
          "type": "string",
          "x-go-name": "SuccessNotes"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "CreateClusterParametersBody": {
      "type": "object",
      "properties": {
        "additional_node_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateNodeGroupParameters"
          },
          "x-go-name": "AdditionalNodeGroups"
        },
        "default_node_group": {
          "$ref": "#/definitions/CreateNodeGroupParameters"
        },
        "disk_gib": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskGiB"
        },
        "instance_type": {
          "description": "following params are deprecated but remain to support cli versions \u003c= 0.72.0\nthis handler will construct everything into DefaultNodeGroup and AdditionalNodeGroups\nin the Bind method",
          "type": "string",
          "x-go-name": "InstanceType"
        },
        "ip_family": {
          "type": "string",
          "x-go-name": "IPFamily"
        },
        "kubernetes_distribution": {
          "type": "string",
          "x-go-name": "KubernetesDistribution"
        },
        "kubernetes_version": {
          "type": "string",
          "x-go-name": "KubernetesVersion"
        },
        "license_id": {
          "type": "string",
          "x-go-name": "LicenseID"
        },
        "max_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxNodeCount"
        },
        "min_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinNodeCount"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NodeCount"
        },
        "node_groups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateNodeGroupParameters"
          },
          "x-go-name": "NodeGroups"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterTag"
          },
          "x-go-name": "Tags"
        },
        "ttl": {
          "type": "string",
          "x-go-name": "TTL"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/cluster"
    },
    "CreateCustomHostnameParams": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "verification_type": {
          "type": "string",
          "x-go-name": "VerificationType"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/custom_hostnames"
    },
    "CreateNodeGroupParameters": {
      "type": "object",
      "properties": {
        "disk_gib": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskGiB"
        },
        "instance_type": {
          "type": "string",
          "x-go-name": "InstanceType"
        },
        "max_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxNodeCount"
        },
        "min_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinNodeCount"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NodeCount"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/cluster"
    },
    "CustomHostnameOverride": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "CustomHostnameOverrides": {
      "type": "object",
      "properties": {
        "downloadPortal": {
          "$ref": "#/definitions/CustomHostnameOverride"
        },
        "proxy": {
          "$ref": "#/definitions/CustomHostnameOverride"
        },
        "registry": {
          "$ref": "#/definitions/CustomHostnameOverride"
        },
        "replicatedApp": {
          "$ref": "#/definitions/CustomHostnameOverride"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "Customer": {
      "type": "object",
      "properties": {
        "actions": {
          "$ref": "#/definitions/CustomerActions"
        },
        "activeInstances": {
          "$ref": "#/definitions/InstancePreview"
        },
        "airgap": {
          "type": "boolean",
          "x-go-name": "IsAirgapEnabled"
        },
        "airgapDownloadedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "AirgapDownloadedAt"
        },
        "airgapDownloadedChannelId": {
          "type": "string",
          "x-go-name": "AirgapDownloadedChannelID"
        },
        "airgapDownloadedChannelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AirgapDownloadedChannelSequence"
        },
        "airgapDownloadedReleaseLabel": {
          "type": "string",
          "x-go-name": "AirgapDownloadedReleaseLabel"
        },
        "appType": {
          "type": "string",
          "x-go-name": "AppType"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "x-go-name": "Channels"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "customId": {
          "type": "string",
          "x-go-name": "CustomID"
        },
        "downloadPortalUrl": {
          "type": "string",
          "x-go-name": "DownloadPortalURL"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "entitlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitlementValue"
          },
          "x-go-name": "Entitlements"
        },
        "esInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerESInstance"
          },
          "x-go-name": "ESInstances"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "inactiveInstances": {
          "$ref": "#/definitions/InstancePreview"
        },
        "installationId": {
          "type": "string",
          "x-go-name": "InstallationID"
        },
        "installationVersion": {
          "type": "string",
          "x-go-name": "InstallationVersion"
        },
        "installedReleaseLabel": {
          "type": "string",
          "x-go-name": "InstalledReleaseLabel"
        },
        "installedReleaseSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstalledReleaseSequence"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerInstance"
          },
          "x-go-name": "Instances"
        },
        "isArchived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "isDisasterRecoverySupported": {
          "type": "boolean",
          "x-go-name": "IsDisasterRecoverySupported"
        },
        "isEmbeddedClusterDownloadEnabled": {
          "type": "boolean",
          "x-go-name": "IsEmbeddedClusterDownloadEnabled"
        },
        "isGeoaxisSupported": {
          "type": "boolean",
          "x-go-name": "IsGeoaxisSupported"
        },
        "isGitopsSupported": {
          "type": "boolean",
          "x-go-name": "IsGitopsSupported"
        },
        "isHelmVmDownloadEnabled": {
          "type": "boolean",
          "x-go-name": "IsHelmVMDownloadEnabled"
        },
        "isIdentityServiceSupported": {
          "type": "boolean",
          "x-go-name": "IsIdentityServiceSupported"
        },
        "isInstallerSupportEnabled": {
          "type": "boolean",
          "x-go-name": "IsInstallerSupportEnabled"
        },
        "isInstancesLimited": {
          "type": "boolean",
          "x-go-name": "IsInstancesLimited"
        },
        "isKotsInstallEnabled": {
          "type": "boolean",
          "x-go-name": "IsKotsInstallEnabled"
        },
        "isSnapshotSupported": {
          "type": "boolean",
          "x-go-name": "IsSnapshotSupported"
        },
        "isSupportBundleUploadEnabled": {
          "type": "boolean",
          "x-go-name": "IsSupportBundleUploadEnabled"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastActive"
        },
        "lowercaseName": {
          "description": "Lowercase fields for ES customer sorting",
          "type": "string",
          "x-go-name": "LowercaseName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pinnedChannelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PinnedChannelSequence"
        },
        "shipInstallStatus": {
          "$ref": "#/definitions/ShipInstallStatus"
        },
        "teamId": {
          "type": "string",
          "x-go-name": "TeamID"
        },
        "type": {
          "$ref": "#/definitions/LicenseType"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "CustomerActions": {
      "type": "object",
      "properties": {
        "shipApply": {
          "type": "string",
          "x-go-name": "ShipApply"
        },
        "shipApplyDocker": {
          "type": "string",
          "x-go-name": "ShipApplyDocker"
        },
        "shipInitCloud": {
          "type": "string",
          "x-go-name": "ShipInitCloud"
        },
        "shipInitHomebrew": {
          "type": "string",
          "x-go-name": "ShipInitHomebrew"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "CustomerAdoption": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string",
          "x-go-name": "ChannelID"
        },
        "count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Count"
        },
        "percent": {
          "type": "number",
          "format": "double",
          "x-go-name": "Percent"
        },
        "releaseSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ReleaseSequence"
        },
        "semver": {
          "type": "string",
          "x-go-name": "Semver"
        },
        "totalOnChannel": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalOnChannel"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/sharedtypes"
    },
    "CustomerESInstance": {
      "type": "object",
      "title": "Instance data saved in ES along with customer license. Only active instances are saved.",
      "properties": {
        "downstreamChannelId": {
          "type": "string",
          "x-go-name": "DownstreamChannelID"
        },
        "downstreamChannelName": {
          "type": "string",
          "x-go-name": "DownstreamChannelName"
        },
        "downstreamChannelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DownstreamChannelSequence"
        },
        "installedReleaseLabel": {
          "type": "string",
          "x-go-name": "InstalledReleaseLabel"
        },
        "instanceId": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "tags": {
          "$ref": "#/definitions/InstanceTags"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "CustomerInstance": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "x-go-name": "Active"
        },
        "appStatus": {
          "type": "string",
          "x-go-name": "AppStatus"
        },
        "client": {
          "type": "string",
          "x-go-name": "Client"
        },
        "cloud": {
          "type": "string",
          "x-go-name": "Cloud"
        },
        "clusterId": {
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "embeddedClusterVersion": {
          "type": "string",
          "x-go-name": "EmbeddedClusterVersion"
        },
        "instanceId": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "isAirgap": {
          "type": "boolean",
          "x-go-name": "IsAirgap"
        },
        "isDummyInstance": {
          "type": "boolean",
          "x-go-name": "IsDummyInstance"
        },
        "isEmbeddedCluster": {
          "type": "boolean",
          "x-go-name": "IsEmbeddedCluster"
        },
        "isKurl": {
          "type": "boolean",
          "x-go-name": "IsKurl"
        },
        "k8sVersion": {
          "type": "string",
          "x-go-name": "K8sVersion"
        },
        "kotsVersion": {
          "type": "string",
          "x-go-name": "KotsVersion"
        },
        "kurlNodeCountReady": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "KurlNodeCountReady"
        },
        "kurlNodeCountTotal": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "KurlNodeCountTotal"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastActive"
        },
        "licenseId": {
          "type": "string",
          "x-go-name": "LicenseID"
        },
        "replicatedSdkVersion": {
          "type": "string",
          "x-go-name": "ReplicatedSDKVersion"
        },
        "tags": {
          "$ref": "#/definitions/InstanceTags"
        },
        "versionHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerInstanceVersionHistory"
          },
          "x-go-name": "VersionHistory"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "CustomerInstanceVersionHistory": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "x-go-name": "ClusterID"
        },
        "downstreamChannelId": {
          "type": "string",
          "x-go-name": "DownstreamChannelID"
        },
        "downstreamReleaseSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DownstreamReleaseSequence"
        },
        "instanceId": {
          "type": "string",
          "x-go-name": "InstanceID"
        },
        "intervalLast": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "IntervalLast"
        },
        "intervalStart": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "IntervalStart"
        },
        "nativeHelmCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "NativeHelmCount"
        },
        "replHelmCount": {
          "type": "integer",
          "format": "int32",
          "x-go-name": "ReplHelmCount"
        },
        "versionLabel": {
          "type": "string",
          "x-go-name": "VersionLabel"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "DeleteCustomHostnameParams": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/custom_hostnames"
    },
    "ESCustomer": {
      "type": "object",
      "properties": {
        "actions": {
          "$ref": "#/definitions/CustomerActions"
        },
        "activeInstances": {
          "$ref": "#/definitions/InstancePreview"
        },
        "airgap": {
          "type": "boolean",
          "x-go-name": "IsAirgapEnabled"
        },
        "airgapDownloadedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "AirgapDownloadedAt"
        },
        "airgapDownloadedChannelId": {
          "type": "string",
          "x-go-name": "AirgapDownloadedChannelID"
        },
        "airgapDownloadedChannelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "AirgapDownloadedChannelSequence"
        },
        "airgapDownloadedReleaseLabel": {
          "type": "string",
          "x-go-name": "AirgapDownloadedReleaseLabel"
        },
        "appType": {
          "type": "string",
          "x-go-name": "AppType"
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Channel"
          },
          "x-go-name": "Channels"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "customId": {
          "type": "string",
          "x-go-name": "CustomID"
        },
        "downloadPortalUrl": {
          "type": "string",
          "x-go-name": "DownloadPortalURL"
        },
        "email": {
          "type": "string",
          "x-go-name": "Email"
        },
        "entitlements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntitlementValue"
          },
          "x-go-name": "Entitlements"
        },
        "esInstances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerESInstance"
          },
          "x-go-name": "ESInstances"
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ExpiresAt"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "inactiveInstances": {
          "$ref": "#/definitions/InstancePreview"
        },
        "installationId": {
          "type": "string",
          "x-go-name": "InstallationID"
        },
        "installationVersion": {
          "type": "string",
          "x-go-name": "InstallationVersion"
        },
        "installedReleaseLabel": {
          "type": "string",
          "x-go-name": "InstalledReleaseLabel"
        },
        "installedReleaseSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstalledReleaseSequence"
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerInstance"
          },
          "x-go-name": "Instances"
        },
        "isActive": {
          "type": "boolean",
          "x-go-name": "IsActive"
        },
        "isArchived": {
          "type": "boolean",
          "x-go-name": "IsArchived"
        },
        "isDisasterRecoverySupported": {
          "type": "boolean",
          "x-go-name": "IsDisasterRecoverySupported"
        },
        "isEmbeddedClusterDownloadEnabled": {
          "type": "boolean",
          "x-go-name": "IsEmbeddedClusterDownloadEnabled"
        },
        "isGeoaxisSupported": {
          "type": "boolean",
          "x-go-name": "IsGeoaxisSupported"
        },
        "isGitopsSupported": {
          "type": "boolean",
          "x-go-name": "IsGitopsSupported"
        },
        "isHelmVmDownloadEnabled": {
          "type": "boolean",
          "x-go-name": "IsHelmVMDownloadEnabled"
        },
        "isIdentityServiceSupported": {
          "type": "boolean",
          "x-go-name": "IsIdentityServiceSupported"
        },
        "isInstallerSupportEnabled": {
          "type": "boolean",
          "x-go-name": "IsInstallerSupportEnabled"
        },
        "isInstancesLimited": {
          "type": "boolean",
          "x-go-name": "IsInstancesLimited"
        },
        "isKotsInstallEnabled": {
          "type": "boolean",
          "x-go-name": "IsKotsInstallEnabled"
        },
        "isSnapshotSupported": {
          "type": "boolean",
          "x-go-name": "IsSnapshotSupported"
        },
        "isSupportBundleUploadEnabled": {
          "type": "boolean",
          "x-go-name": "IsSupportBundleUploadEnabled"
        },
        "lastActive": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "LastActive"
        },
        "lowercaseName": {
          "description": "Lowercase fields for ES customer sorting",
          "type": "string",
          "x-go-name": "LowercaseName"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "pinnedChannelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "PinnedChannelSequence"
        },
        "shipInstallStatus": {
          "$ref": "#/definitions/ShipInstallStatus"
        },
        "teamId": {
          "type": "string",
          "x-go-name": "TeamID"
        },
        "type": {
          "$ref": "#/definitions/LicenseType"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer"
    },
    "EnterpriseChannel": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "enterprise_name": {
          "type": "string",
          "x-go-name": "EnterpriseName"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "installer": {
          "$ref": "#/definitions/EnterpriseInstaller"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnterprisePolicy"
          },
          "x-go-name": "Policies"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/enterprise"
    },
    "EnterpriseInstaller": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "partner_id": {
          "type": "string",
          "x-go-name": "PartnerID"
        },
        "yaml": {
          "type": "string",
          "x-go-name": "Yaml"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/enterprise"
    },
    "EnterprisePolicy": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "partner_id": {
          "type": "string",
          "x-go-name": "PartnerID"
        },
        "policy": {
          "type": "string",
          "x-go-name": "Policy"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/enterprise"
    },
    "EntitlementField": {
      "type": "object",
      "properties": {
        "default": {
          "type": "string",
          "x-go-name": "Default"
        },
        "hidden": {
          "type": "boolean",
          "x-go-name": "Hidden"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "required": {
          "type": "boolean",
          "x-go-name": "Required"
        },
        "title": {
          "type": "string",
          "x-go-name": "Title"
        },
        "type": {
          "$ref": "#/definitions/EntitlementValueType"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "EntitlementValue": {
      "type": "object",
      "properties": {
        "isDefault": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "EntitlementValueType": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "ExternalRegistry": {
      "type": "object",
      "properties": {
        "authType": {
          "type": "string",
          "x-go-name": "AuthType"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        },
        "provider": {
          "type": "string",
          "x-go-name": "Provider"
        },
        "teamId": {
          "type": "string",
          "x-go-name": "TeamID"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/kots"
    },
    "ExternalRegistryLog": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "x-go-name": "Action"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "image": {
          "type": "string",
          "x-go-name": "Image"
        },
        "isSuccess": {
          "type": "boolean",
          "x-go-name": "IsSuccess"
        },
        "statusCode": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "StatusCode"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/kots"
    },
    "ExtraLintRules": {
      "type": "object",
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "GetInstanceEventsSubscriptionsResponseBody": {
      "type": "object",
      "properties": {
        "subscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InstanceEventsSubscription"
          },
          "x-go-name": "Subscriptions"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/notifications"
    },
    "GetSlackWebhookURLResponseBody": {
      "type": "object",
      "properties": {
        "webhookUrl": {
          "type": "string",
          "x-go-name": "WebhookURL"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/notifications"
    },
    "GitHubRef": {
      "type": "object",
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "HelmChart": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string",
          "x-go-name": "Error"
        },
        "hasPreflightSpec": {
          "type": "boolean",
          "x-go-name": "HasPreflightSpec"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        },
        "weight": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Weight"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "IncreaseQuotaRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "requested_value": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "RequestedValue"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/cluster"
    },
    "InstanceEventsSubscription": {
      "type": "object",
      "properties": {
        "eventNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "EventNames"
        },
        "instance": {
          "$ref": "#/definitions/InstanceLink"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/notifications"
    },
    "InstanceLink": {
      "type": "object",
      "properties": {
        "appSlug": {
          "type": "string",
          "x-go-name": "AppSlug"
        },
        "customerId": {
          "type": "string",
          "x-go-name": "CustomerID"
        },
        "customerName": {
          "type": "string",
          "x-go-name": "CustomerName"
        },
        "instanceId": {
          "type": "string",
          "x-go-name": "InstanceID"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/notifications"
    },
    "InstancePreview": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CustomerInstance"
          },
          "x-go-name": "Instances"
        },
        "moreAvailable": {
          "type": "boolean",
          "x-go-name": "MoreAvailable"
        },
        "totalCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCount"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "InstanceTag": {
      "type": "object",
      "properties": {
        "instanceId": {
          "type": "string",
          "x-go-name": "InstanceId"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "origin": {
          "type": "string",
          "x-go-name": "Origin"
        },
        "value": {
          "type": "string",
          "x-go-name": "Value"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "InstanceTags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/InstanceTag"
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "InstanceTrends": {
      "type": "object",
      "properties": {
        "activeInstancesBefore": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveInstancesBefore"
        },
        "activeInstancesToday": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveInstancesToday"
        },
        "completedUpgradesPreviousPeriod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompletedUpgradesPreviousPeriod"
        },
        "completedUpgradesThisPeriod": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CompletedUpgradesThisPeriod"
        },
        "lastThreeVersionsPercentageBefore": {
          "type": "number",
          "format": "double",
          "x-go-name": "LastThreeVersionsPercentageBefore"
        },
        "lastThreeVersionsPercentageToday": {
          "type": "number",
          "format": "double",
          "x-go-name": "LastThreeVersionsPercentageToday"
        },
        "medianInstanceAgeBefore": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MedianInstanceAgeBefore"
        },
        "medianInstanceAgeToday": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MedianInstanceAgeToday"
        },
        "uniqueVersionsBefore": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueVersionsBefore"
        },
        "uniqueVersionsToday": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "UniqueVersionsToday"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "KotsAppCustomHostname": {
      "description": "KotsAppCustomHostname represents a custom hostname configured for a kots app",
      "type": "object",
      "properties": {
        "app_id": {
          "type": "string",
          "x-go-name": "AppID"
        },
        "cloudflare_custom_hostname_id": {
          "type": "string",
          "x-go-name": "CloudflareCustomHostnameID"
        },
        "cloudflare_worker_route_id": {
          "type": "string",
          "x-go-name": "CloudflareWorkerRouteID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "domain_txt_record_name": {
          "type": "string",
          "x-go-name": "DomainTxtRecordName"
        },
        "domain_txt_record_value": {
          "type": "string",
          "x-go-name": "DomainTxtRecordValue"
        },
        "domain_verification_status": {
          "type": "string",
          "x-go-name": "DomainVerificationStatus"
        },
        "domain_verification_type": {
          "type": "string",
          "x-go-name": "DomainVerificationType"
        },
        "failure_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "FailureCount"
        },
        "failure_reason": {
          "type": "string",
          "x-go-name": "FailureReason"
        },
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        },
        "is_default": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "origin_server": {
          "type": "string",
          "x-go-name": "OriginServer"
        },
        "team_id": {
          "type": "string",
          "x-go-name": "TeamID"
        },
        "tls_txt_record_name": {
          "type": "string",
          "x-go-name": "TLSTxtRecordName"
        },
        "tls_txt_record_value": {
          "type": "string",
          "x-go-name": "TLSTxtRecordValue"
        },
        "tls_verification_status": {
          "type": "string",
          "x-go-name": "TLSVerificationStatus"
        },
        "tls_verification_type": {
          "type": "string",
          "x-go-name": "TLSVerificationType"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        },
        "verification_errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "VerificationErrors"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customhostname"
    },
    "KotsChannelRelease": {
      "type": "object",
      "properties": {
        "airgapBuildError": {
          "type": "string",
          "x-go-name": "AirgapBuildError"
        },
        "airgapBuildStatus": {
          "type": "string",
          "x-go-name": "AirgapBuildStatus"
        },
        "airgapBundleImages": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "AirgapBundleImages"
        },
        "channelIcon": {
          "type": "string",
          "x-go-name": "ChannelIcon"
        },
        "channelId": {
          "type": "string",
          "x-go-name": "ChannelID"
        },
        "channelName": {
          "type": "string",
          "x-go-name": "ChannelName"
        },
        "channelSequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ChannelSequence"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "createdBy": {
          "$ref": "#/definitions/Actor"
        },
        "hasKurlInstaller": {
          "type": "boolean",
          "x-go-name": "HasKurlInstaller"
        },
        "isRequired": {
          "type": "boolean",
          "x-go-name": "IsRequired"
        },
        "kurlInstallerID": {
          "type": "string",
          "x-go-name": "KurlInstallerID"
        },
        "lintResult": {
          "$ref": "#/definitions/LintResult"
        },
        "proxyRegistryDomain": {
          "type": "string",
          "x-go-name": "ProxyRegistryDomain"
        },
        "registrySecret": {
          "type": "string",
          "x-go-name": "RegistrySecret"
        },
        "releaseNotes": {
          "type": "string",
          "x-go-name": "ReleaseNotes"
        },
        "releasedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "ReleasedAt"
        },
        "replicatedRegistryDomain": {
          "type": "string",
          "x-go-name": "ReplicatedRegistryDomain"
        },
        "semver": {
          "type": "string",
          "x-go-name": "Semver"
        },
        "sequence": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "Sequence"
        },
        "updated": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Updated"
        },
        "updatedBy": {
          "$ref": "#/definitions/Actor"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "LicenseType": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/types"
    },
    "LintExpression": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "x-go-name": "Message"
        },
        "path": {
          "type": "string",
          "x-go-name": "Path"
        },
        "rule": {
          "type": "string",
          "x-go-name": "Rule"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/release"
    },
    "LintResult": {
      "type": "object",
      "properties": {
        "isLintingComplete": {
          "type": "boolean",
          "x-go-name": "IsLintingComplete"
        },
        "lintExpressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LintExpression"
          },
          "x-go-name": "LintExpressions"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/lint"
    },
    "NodeGroup": {
      "type": "object",
      "properties": {
        "cluster_guid": {
          "type": "string",
          "x-go-name": "ClusterGUID"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "CreatedAt"
        },
        "credits_per_hour": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "CreditsPerHour"
        },
        "disk_gib": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "DiskGiB"
        },
        "id": {
          "type": "string",
          "x-go-name": "ID"
        },
        "instance_type": {
          "type": "string",
          "x-go-name": "InstanceType"
        },
        "is_default": {
          "type": "boolean",
          "x-go-name": "IsDefault"
        },
        "max_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MaxNodeCount"
        },
        "min_node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinNodeCount"
        },
        "minutes_billed": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "MinutesBilled"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "node_count": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NodeCount"
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterNode"
          },
          "x-go-name": "ClusterNodes"
        },
        "running_at": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "RunningAt"
        },
        "total_credits": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCredits"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "NodeType": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "PortProtocol": {
      "type": "string",
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "SetDefaultHostnameParams": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/custom_hostnames"
    },
    "ShipInstallStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "x-go-name": "Status"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "UpdatedAt"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/sharedtypes"
    },
    "SupportedKubernetesDistributionAndVersions": {
      "type": "object",
      "properties": {
        "instance_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "InstanceTypes"
        },
        "nodes_max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NodesMax"
        },
        "short_name": {
          "type": "string",
          "x-go-name": "ShortName"
        },
        "status": {
          "$ref": "#/definitions/ClusterDistributionStatus"
        },
        "version_details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedKubernetesVersion"
          },
          "x-go-name": "VersionDetails"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "SupportedKubernetesVersion": {
      "type": "object",
      "properties": {
        "nodes_max": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "NodesMax"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "TotalActiveInactiveCustomers": {
      "type": "object",
      "properties": {
        "activeCustomers": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "ActiveCustomers"
        },
        "inactiveCustomers": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InactiveCustomers"
        },
        "totalCustomers": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalCustomers"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/customer/sharedtypes"
    },
    "UnsetDefaultHostnameParams": {
      "type": "object",
      "properties": {
        "hostname": {
          "type": "string",
          "x-go-name": "Hostname"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/handlers/replv3/custom_hostnames"
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Errors"
        },
        "supported_distributions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedKubernetesDistributionAndVersions"
          },
          "x-go-name": "SupportedDistributions"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/vendor-api/cluster/types"
    },
    "VersionAdoption": {
      "type": "object",
      "properties": {
        "instanceCount": {
          "type": "integer",
          "format": "int64",
          "x-go-name": "InstanceCount"
        },
        "versionLabel": {
          "type": "string",
          "x-go-name": "VersionLabel"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    },
    "VersionAdoptionReport": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Date"
        },
        "versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionAdoption"
          },
          "x-go-name": "Versions"
        }
      },
      "x-go-package": "github.com/replicatedhq/vandoor/go-sdk/pkg/kots/channel/types"
    }
  },
  "responses": {
    "atchiveReleasesResponse": {
      "description": "ArchiveReleasesResponse contains response properties",
      "schema": {
        "type": "object"
      }
    },
    "channelReleaseAirgapBuildResponse": {
      "description": "ChannelReleaseAirgapBuildResponse contains empty JSON object",
      "schema": {
        "type": "object"
      }
    },
    "channelReleaseAirgapBundleURLResponse": {
      "description": "ChannelReleaseAirgapBundleURLResponse contains the airgap bundle download URL",
      "schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "x-go-name": "URL"
          }
        }
      }
    },
    "compatibilityErrorResponse": {
      "description": "ReportCompatibilityResultErrorResponse contains error information",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "validationError": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "compatibilityResponse": {
      "description": "ReportCompatibilityResultResponse represents compatibility result.",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "createClusterAddonObjectStoreResponse": {
      "description": "CreateClusterAddonObjectStoreResponse contains the response to a create cluster object store addon request",
      "schema": {
        "type": "object",
        "properties": {
          "addon": {
            "$ref": "#/definitions/ClusterAddon"
          }
        }
      }
    },
    "createClusterAddonPostgresResponse": {
      "description": "CreateClusterAddonPostgresResponse contains the response to a create cluster postgres addon request",
      "schema": {
        "type": "object",
        "properties": {
          "addon": {
            "$ref": "#/definitions/ClusterAddon"
          }
        }
      }
    },
    "createClusterErrorResponse": {
      "description": "CreateClusterErrorResponse contains error information",
      "schema": {
        "type": "object",
        "properties": {
          "maxAKS": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxAKS"
          },
          "maxDiskGiB": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxDiskGiB"
          },
          "maxEKS": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxEKS"
          },
          "maxGKE": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxGKE"
          },
          "maxMemoryGiB": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxMemoryGiB"
          },
          "maxOKE": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxOKE"
          },
          "maxVCPUs": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxVCPUs"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          },
          "validationError": {
            "$ref": "#/definitions/ValidationError"
          }
        }
      }
    },
    "createClusterPortResponse": {
      "description": "CreateClusterPortResponse contains the response to a create cluster port request",
      "schema": {
        "type": "object",
        "properties": {
          "addon": {
            "$ref": "#/definitions/ClusterAddon"
          },
          "port": {
            "$ref": "#/definitions/ClusterPort"
          }
        }
      }
    },
    "createClusterResponse": {
      "description": "CreateClusterResponse contains the response to create a cluster",
      "schema": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/definitions/Cluster"
          }
        }
      }
    },
    "createCustomHostnameResponse": {
      "description": "CreateCustomHostnameResponse contains whether or not the request was successful",
      "schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        }
      }
    },
    "createExternalRegistryResponse": {
      "description": "CreateExternalRegistryResponse represents an external registry.",
      "schema": {
        "type": "object",
        "properties": {
          "external_registry": {
            "$ref": "#/definitions/ExternalRegistry"
          }
        }
      }
    },
    "createLicenseFieldResponse": {
      "description": "CreateLicenseFieldResponse contains the response of all license fields",
      "schema": {
        "$ref": "#/definitions/EntitlementField"
      }
    },
    "createRelease": {
      "description": "CreateReleaseResponse contains the new release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/AppRelease"
          }
        }
      }
    },
    "deleteClusterPortResponse": {
      "description": "DeleteClusterPortResponse contains the response to a delete cluster port request",
      "schema": {
        "type": "object",
        "properties": {
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterAddon"
            },
            "x-go-name": "Addons"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterPort"
            },
            "x-go-name": "Ports"
          }
        }
      }
    },
    "deleteClusterResponse": {
      "description": "DeleteClusterResponse contains the response to delete a cluster",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "deleteCustomHostnameResponse": {
      "description": "DeleteCustomHostnameResponse contains whether or not the request was successful",
      "schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        }
      }
    },
    "deleteLicenseFieldResponse": {
      "description": "DeleteLicenseFieldResponse contains the response from deleting a license field"
    },
    "downloadLicenseResponse": {
      "description": "DownloadLicenseResponse contains the license yaml",
      "schema": {
        "type": "string"
      }
    },
    "draftReleaseResponse": {
      "description": "DraftReleaseResponse contains the draft release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/AppReleaseDraft"
          }
        }
      }
    },
    "editLicenseFieldResponse": {
      "description": "EditLicenseFieldResponse contains the license fields",
      "schema": {
        "$ref": "#/definitions/EntitlementField"
      }
    },
    "externalRegistryLogsResponse": {
      "description": "ExternalRegistryLogsResponse contains the JSON external registry logs",
      "schema": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExternalRegistryLog"
            },
            "x-go-name": "Logs"
          }
        }
      }
    },
    "getAppResponse": {
      "description": "GetAppResponse represents an app.",
      "schema": {
        "type": "object",
        "properties": {
          "app": {
            "$ref": "#/definitions/AppWithChannels"
          }
        }
      }
    },
    "getChannelAdoptionReportResponse": {
      "description": "GetChannelAdoptionReportResponse represents channel adoption report.",
      "schema": {
        "type": "object",
        "properties": {
          "report": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/VersionAdoptionReport"
            },
            "x-go-name": "Report"
          }
        }
      }
    },
    "getChannelInstanceTrendsResponse": {
      "description": "GetChannelInstanceTrendsResponse represents instance trends.",
      "schema": {
        "type": "object",
        "properties": {
          "instanceTrends": {
            "$ref": "#/definitions/InstanceTrends"
          }
        }
      }
    },
    "getChannelReleaseInstallCommandsResponse": {
      "description": "GetChannelReleaseInstallCommandsResponse contains the JSON channel release install commands",
      "schema": {
        "type": "object",
        "properties": {
          "commands": {
            "$ref": "#/definitions/ChannelReleaseInstallCommands"
          }
        }
      }
    },
    "getChannelResponse": {
      "description": "GetChannelResponse represents a channel.",
      "schema": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/definitions/Channel"
          }
        }
      }
    },
    "getClusterFiltersResponse": {
      "description": "GetClusterFiltersResponse contains the response to get clusters filters",
      "schema": {
        "type": "object",
        "properties": {
          "earliest_cluster_date_days_ago": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "EarliestClusterDateDaysAgo"
          },
          "max_cost": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxCost"
          },
          "max_duration_minutes": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxDurationMinutes"
          },
          "max_node_groups": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxNodeGroups"
          },
          "max_nodes": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxNodes"
          },
          "max_ttl_minutes": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "MaxTTLMinutes"
          }
        }
      }
    },
    "getClusterKubeconfigResponse": {
      "description": "GetClusterKubeconfigResponse contains the response to get a cluster kubeconfig",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          },
          "kubeconfig": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8"
            },
            "x-go-name": "Kubeconfig"
          }
        }
      }
    },
    "getClusterResponse": {
      "description": "GetClusterResponse contains the response to get cluster details",
      "schema": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/definitions/Cluster"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "getClusterStatsResponse": {
      "description": "GetClusterStatsResponse contains the response to get clusters stats",
      "schema": {
        "type": "object",
        "properties": {
          "cluster_count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ClusterCount"
          },
          "cost": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Cost"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          },
          "node_minutes": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "NodeMinutes"
          }
        }
      }
    },
    "getCustomerEntitlementsResponse": {
      "description": "GetCustomerEntitlementsResponse represents a customer.",
      "schema": {
        "type": "object",
        "properties": {
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EntitlementValue"
            },
            "x-go-name": "Entitlements"
          }
        }
      }
    },
    "getCustomerInstanceTagsResponse": {
      "description": "GetCustomerInstanceTagsResponse contains the response to update a instance tags",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          },
          "tags": {
            "$ref": "#/definitions/InstanceTags"
          }
        }
      }
    },
    "getCustomerResponse": {
      "description": "GetCustomerResponse represents a customer.",
      "schema": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/definitions/Customer"
          }
        }
      }
    },
    "getRelease": {
      "description": "GetReleaseParameters contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/AppRelease"
          }
        }
      }
    },
    "getSlackWebhookURL": {
      "description": "GetSlackWebhookURLResponse contains details about the Slack webhook URL.",
      "schema": {
        "$ref": "#/definitions/GetSlackWebhookURLResponseBody"
      }
    },
    "getSubscriptions": {
      "description": "GetInstanceEventsSubscriptionsResponse contains response details.",
      "schema": {
        "$ref": "#/definitions/GetInstanceEventsSubscriptionsResponseBody"
      }
    },
    "increaseClusterCreditsErrorResponse": {
      "description": "IncreaseClusterCreditsErrorResponse contains the errors returned when increasing cluster credits",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "increaseClusterCreditsResponse": {
      "description": "IncreaseClusterCreditsResponse contains the response to increase cluster credits",
      "schema": {
        "type": "object",
        "properties": {
          "checkout_url": {
            "type": "string",
            "x-go-name": "CheckoutURL"
          }
        }
      }
    },
    "increaseClusterQuotaErrorResponse": {
      "description": "IncreaseClusterQuotaErrorResponse contains the errors returned when increasing cluster quota",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "increaseClusterQuotaResponse": {
      "description": "IncreaseClusterQuotaResponse contains the response to increase cluster quota",
      "schema": {
        "type": "object"
      }
    },
    "listAppCustomerInstancesResponse": {
      "description": "ListAppCustomerInstancesResponse contains the list of customers",
      "headers": {
        "ContentDisposition": {
          "type": "string",
          "description": "Required: true\nIn: header"
        }
      }
    },
    "listAppCustomersCsvResponse": {
      "description": "ListAppCustomersCsvResponse contains the list of customers",
      "headers": {
        "ContentDisposition": {
          "type": "string",
          "description": "Required: true\nIn: header"
        }
      }
    },
    "listAppInstanceEventsResponse": {
      "description": "ListAppInstanceEventsResponse contains the list of instance events",
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "appId": {
              "type": "string",
              "x-go-name": "AppId"
            },
            "customerId": {
              "type": "string",
              "x-go-name": "CustomerId"
            },
            "fieldName": {
              "type": "string",
              "x-go-name": "FieldName"
            },
            "instanceId": {
              "type": "string",
              "x-go-name": "InstanceId"
            },
            "isCustom": {
              "type": "string",
              "x-go-name": "IsCustom"
            },
            "newValue": {
              "type": "string",
              "x-go-name": "NewValue"
            },
            "previousValue": {
              "type": "string",
              "x-go-name": "PreviousValue"
            },
            "reportedAt": {
              "type": "string",
              "x-go-name": "ReportedAt"
            }
          }
        }
      }
    },
    "listAppsResponse": {
      "description": "ListAppsResponse contains the JSON apps list",
      "schema": {
        "type": "object",
        "properties": {
          "apps": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppWithChannels"
            },
            "x-go-name": "Apps"
          }
        }
      }
    },
    "listChannelReleasesResponse": {
      "description": "ListChannelReleasesResponse contains the JSON channel releases list",
      "schema": {
        "type": "object",
        "properties": {
          "releases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KotsChannelRelease"
            },
            "x-go-name": "Releases"
          }
        }
      }
    },
    "listChannelsResponse": {
      "description": "ListChannelsResponse contains the JSON channels list",
      "schema": {
        "type": "object",
        "properties": {
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Channel"
            },
            "x-go-name": "Channels"
          },
          "enterprise_channels": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/EnterpriseChannel"
            },
            "x-go-name": "EnterpriseChannels"
          }
        }
      }
    },
    "listClusterAddonsResponse": {
      "description": "ListClusterAddonsResponse contains the response to a list clusters addons request",
      "schema": {
        "type": "object",
        "properties": {
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterAddon"
            },
            "x-go-name": "Addons"
          }
        }
      }
    },
    "listClusterPortsResponse": {
      "description": "ListClusterPortsResponse contains the response to a list cluster [prts] request",
      "schema": {
        "type": "object",
        "properties": {
          "addons": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterAddon"
            },
            "x-go-name": "Addons"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterPort"
            },
            "x-go-name": "Ports"
          }
        }
      }
    },
    "listClusterQuotasResponse": {
      "description": "ListClusterQuotasResponse contains the response to list cluster quotas",
      "schema": {
        "type": "object",
        "properties": {
          "cluster_quotas": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterQuota"
            },
            "x-go-name": "ClusterQuotas"
          }
        }
      }
    },
    "listClusterUsageResponse": {
      "description": "ListClusterUsageResponse contains the response to list cluster usage",
      "schema": {
        "type": "object",
        "properties": {
          "clusterUsageDetails": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ClusterDetail"
            },
            "x-go-name": "ClusterUsageDetails"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "listClusterVersionsResponse": {
      "description": "ListClusterVersionsResponse contains the response to list clusters",
      "schema": {
        "type": "object",
        "properties": {
          "cluster-versions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SupportedKubernetesDistributionAndVersions"
            },
            "x-go-name": "Clusters"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "listClustersResponse": {
      "description": "ListClustersResponse contains the response to list clusters",
      "schema": {
        "type": "object",
        "properties": {
          "clusters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Cluster"
            },
            "x-go-name": "Clusters"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          },
          "totalClusters": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalClusters"
          }
        }
      }
    },
    "listCustomHostnamesResponse": {
      "description": "ListCustomHostnamesResponse contains the JSON custom hostnames list",
      "schema": {
        "type": "object",
        "properties": {
          "downloadPortal": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KotsAppCustomHostname"
            },
            "x-go-name": "DownloadPortal"
          },
          "proxy": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KotsAppCustomHostname"
            },
            "x-go-name": "Proxy"
          },
          "registry": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KotsAppCustomHostname"
            },
            "x-go-name": "Registry"
          },
          "replicatedApp": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/KotsAppCustomHostname"
            },
            "x-go-name": "ReplicatedApp"
          }
        }
      }
    },
    "listCustomerInstancesResponse": {
      "description": "ListCustomerInstancesResponse contains the JSON instances list",
      "schema": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/CustomerInstance"
            },
            "x-go-name": "Instances"
          }
        }
      }
    },
    "listCustomersResponse": {
      "description": "ListCustomersResponse contains the JSON customers list",
      "schema": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/Customer"
            },
            "x-go-name": "Customers"
          },
          "totalCustomers": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalCustomers"
          }
        }
      }
    },
    "listExternalRegistriesResponse": {
      "description": "ListExternalRegistriesResponse contains the JSON external registries list",
      "schema": {
        "type": "object",
        "properties": {
          "external_registries": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ExternalRegistry"
            },
            "x-go-name": "ExternalRegistries"
          }
        }
      }
    },
    "listLicenseFieldsResponse": {
      "description": "ListLicenseFieldsResponse contains the list of license fields",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/EntitlementField"
        }
      }
    },
    "listReleasesResponse": {
      "description": "ListReleasesResponse contains the JSON releases list",
      "schema": {
        "type": "object",
        "properties": {
          "approximateTotalCount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ApproximateTotalCount"
          },
          "releases": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/AppRelease"
            },
            "x-go-name": "Releases"
          }
        }
      }
    },
    "postAirgapPasswordResponse": {
      "description": "PostAirgapPasswordResponse contains the returned password",
      "schema": {
        "type": "object",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "type": "string",
            "x-go-name": "Password"
          }
        }
      }
    },
    "promoteReleaseErrorResponse": {
      "description": "PromoteReleaseErrorResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "channel": {
            "$ref": "#/definitions/Channel"
          },
          "lintExpressions": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/LintExpression"
            },
            "x-go-name": "LintExpressions"
          },
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "promoteReleaseResponse": {
      "description": "PromoteReleaseResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/AppRelease"
          }
        }
      }
    },
    "responseErrBadRequest": {
      "description": "Returned on bad input",
      "schema": {
        "type": "object",
        "properties": {
          "error_code": {
            "description": "Error code if available",
            "type": "string",
            "x-go-name": "ErrorCode"
          },
          "message": {
            "description": "Error message text if available",
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "responseErrConflict": {
      "description": "Returned on a conflict"
    },
    "responseErrForbidden": {
      "description": "Returned if the caller does not have the needed permission"
    },
    "responseErrNotFound": {
      "description": "Returned on resource not found"
    },
    "responseErrTooManyRequests": {
      "description": "Return if the caller is being rate limited"
    },
    "responseErrUnauthorized": {
      "description": "Return if the caller is not authorized"
    },
    "responseNoContent": {
      "description": "On success, no payload returned"
    },
    "responseOk": {
      "description": "On success"
    },
    "searchTeamCustomersResponse": {
      "description": "SearchTeamCustomersResponse contains the list of licenses",
      "schema": {
        "type": "object",
        "properties": {
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ESCustomer"
            },
            "x-go-name": "Customers"
          },
          "query": {
            "type": "string",
            "x-go-name": "Query"
          },
          "total_hits": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "TotalHits"
          }
        }
      }
    },
    "setDefaultHostnameResponse": {
      "description": "SetDefaultHostnameResponse contains whether or not the request was successful",
      "schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        }
      }
    },
    "setSlackWebhookURL": {
      "description": "SetSlackWebhookURLResponse contains details about the Slack webhook update.",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "description": "Error message if any",
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "subscribeInstanceEvents": {
      "description": "SubscribeInstanceEventsResponse contains response details.",
      "schema": {
        "type": "object"
      }
    },
    "testExternalRegistryResponse": {
      "description": "TestExternalRegistriesResponse contains the JSON external registries test",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          },
          "status": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Status"
          }
        }
      }
    },
    "testReleaseErrorResponse": {
      "description": "TestReleaseErrorResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "testReleaseResponse": {
      "description": "TestReleaseResponse contains the release properties",
      "schema": {
        "type": "object"
      }
    },
    "testSlackWebhookURL": {
      "description": "TestSlackWebhookURLResponse contains details about the Slack webhook test.",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "unsetDefaultHostnameResponse": {
      "description": "UnsetDefaultHostnameResponse contains whether or not the request was successful",
      "schema": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "x-go-name": "Success"
          }
        }
      }
    },
    "unsubscribeInstanceEvents": {
      "description": "UnsubscribeInstanceEventsResponse contains response details.",
      "schema": {
        "type": "object"
      }
    },
    "updateChannelRelease": {
      "description": "UpdateChannelReleaseResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/KotsChannelRelease"
          }
        }
      }
    },
    "updateClusterTTLErrorResponse": {
      "description": "UpdateClusterTTLErrorResponse contains error information",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "updateClusterTTLResponse": {
      "description": "UpdateClusterTTLResponse contains the response to update a cluster ttl",
      "schema": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/definitions/Cluster"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "updateClusterTagsResponse": {
      "description": "UpdateClusterTagsResponse contains the response to update a cluster tags",
      "schema": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/definitions/Cluster"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "updateCustomerInstanceTagsResponse": {
      "description": "UpdateCustomerInstanceTagsResponse contains the response to update a instance tags",
      "schema": {
        "type": "object",
        "properties": {
          "customerInstance": {
            "$ref": "#/definitions/CustomerInstance"
          },
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "updateRelease": {
      "description": "UpdateReleaseResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "release": {
            "$ref": "#/definitions/AppRelease"
          }
        }
      }
    },
    "updateReleaseError": {
      "description": "UpdateReleaseErrorResponse contains the release properties",
      "schema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "x-go-name": "Message"
          }
        }
      }
    },
    "upgradeClusterResponse": {
      "description": "UpgradeClusterResponse contains the response to upgrade a cluster",
      "schema": {
        "type": "object",
        "properties": {
          "cluster": {
            "$ref": "#/definitions/Cluster"
          }
        }
      }
    },
    "upgradeClusterValidationErrorResponse": {
      "description": "UpgradeClusterValidationErrorResponse contains a bad request response when upgrading a cluster",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}